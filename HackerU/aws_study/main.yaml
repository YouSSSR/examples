- hosts: nginx
  gather_facts: no
  tasks:
  #- debug: var=ec2_access_key

  - name: create key pair using 'file' lookup plugin
    run_once: yes
    delegate_to: localhost
    amazon.aws.ec2_key:
      name: "{{ ssh_key_name }}"
      key_material: "{{ lookup('file', 'id_rsa.pub') }}"
      region: "{{ region }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      ec2_url: "{{ ec2_url }}"

  - name: create a vpc
    run_once: yes
    delegate_to: localhost
    ec2_vpc_net:
      name: "{{ vpc_id }}"
      region: "{{ region }}"
      cidr_block: "{{ cidr }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      ec2_url: "{{ ec2_url }}"
    register: vpc

  #- debug: var=vpc

  - name: Create subnet for nginx servers
    run_once: yes
    delegate_to: localhost
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{vpc.vpc.id }}"
      cidr: "{{ subnet_cidr }}"
      tags:
        Name: nginx Subnet
      region: "{{ region }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      ec2_url: "{{ ec2_url }}"
    register: nginx_subnet

#  - debug: var=nginx_subnet

  - name: example ec2 group
    run_once: yes
    delegate_to: localhost
    amazon.aws.ec2_group:
      name: "{{ nginx_security_group }}"
      description: hackeryou
      vpc_id: "{{vpc.vpc.id }}"
      region: "{{ region }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  #- debug: var=nginx_security_group

  - name: Launch instance
    delegate_to: localhost
    amazon.aws.ec2:
      key_name: "{{ ssh_key_name }}"
      group: "{{ nginx_security_group }}"
      instance_type: "{{ instance_type }}"
      image: "{{ debian_ami_image }}"
      wait: true
      region: "{{ region }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      vpc_subnet_id: "{{ nginx_subnet.subnet.id }}"
      assign_public_ip: yes
    register: ec2

   # - debug: var=ec2

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: realservers
    loop: "{{ ec2.instances }}"

  - name: Wait for SSH to com up
    delegate_to: "{{ item.public_dns_name }}"
    wait_for_connection:
      delay: 60
      timeout: 320
    loop: "{{ ec2.instances }}"

   
#- hosts:
#    roles:
#      - docker
#      - azaza
#      - ololo
#      - ....

      